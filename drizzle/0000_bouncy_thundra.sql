-- Current sql file was generated after introspecting the database
-- If you want to run this migration please uncomment this code before executing migrations
/*
CREATE TYPE "public"."STUDENT_ACCESS" AS ENUM('CLASS', 'LEVEL', 'FULL');--> statement-breakpoint
CREATE TABLE "sections" (
	"id" bigint GENERATED BY DEFAULT AS IDENTITY (sequence name "sections_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"level" smallint NOT NULL,
	"section" varchar(24) NOT NULL,
	"school_id" bigint NOT NULL
);
--> statement-breakpoint
ALTER TABLE "sections" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "allowed_user_sections" (
	"user_id" bigint NOT NULL,
	"section_id" bigint NOT NULL
);
--> statement-breakpoint
ALTER TABLE "allowed_user_sections" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "attendances" (
	"id" bigint GENERATED BY DEFAULT AS IDENTITY (sequence name "attendances_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"student_id" bigint NOT NULL,
	"timestamp" timestamp with time zone NOT NULL,
	"allowed_user_id" bigint
);
--> statement-breakpoint
ALTER TABLE "attendances" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "allowed_users" (
	"id" bigserial NOT NULL,
	"domain" text NOT NULL,
	"org_id" text NOT NULL,
	"given_password" text NOT NULL,
	"is_registered" boolean DEFAULT false,
	"role" "STUDENT_ACCESS" DEFAULT 'CLASS' NOT NULL
);
--> statement-breakpoint
ALTER TABLE "allowed_users" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "students" (
	"id" bigint GENERATED BY DEFAULT AS IDENTITY (sequence name "students_lrn_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"last_name" text NOT NULL,
	"first_name" text NOT NULL,
	"middle_name" text,
	"section_id" bigint NOT NULL,
	CONSTRAINT "students_first_name_check" CHECK ((length(first_name) > 0) AND (length(first_name) <= 50)),
	CONSTRAINT "students_last_name_check" CHECK ((length(last_name) > 0) AND (length(last_name) <= 32)),
	CONSTRAINT "students_lrn_check" CHECK ((id >= '100000000000'::bigint) AND (id <= '999999999999'::bigint)),
	CONSTRAINT "students_middle_name_check" CHECK (length(middle_name) <= 16)
);
--> statement-breakpoint
ALTER TABLE "students" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "schools" (
	"id" bigint GENERATED BY DEFAULT AS IDENTITY (sequence name "schools_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"name" text NOT NULL,
	"domain" text,
	"decryption_key" text DEFAULT replace(replace(encode(extensions.gen_random_bytes(32), 'base64'::text), '+'::text, '-'::text), '/'::text, '_'::text) NOT NULL
);
--> statement-breakpoint
ALTER TABLE "schools" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
ALTER TABLE "sections" ADD CONSTRAINT "sections_school_id_fkey" FOREIGN KEY ("school_id") REFERENCES "public"."schools"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "allowed_user_sections" ADD CONSTRAINT "allowed_user_sections_section_id_fkey" FOREIGN KEY ("section_id") REFERENCES "public"."sections"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "allowed_user_sections" ADD CONSTRAINT "allowed_user_sections_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."allowed_users"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "attendances" ADD CONSTRAINT "attendances_allowed_user_id_fkey" FOREIGN KEY ("allowed_user_id") REFERENCES "public"."allowed_users"("id") ON DELETE set null ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "attendances" ADD CONSTRAINT "attendances_student_id_fkey" FOREIGN KEY ("student_id") REFERENCES "public"."students"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "students" ADD CONSTRAINT "students_section_id_fkey" FOREIGN KEY ("section_id") REFERENCES "public"."sections"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "schools" ADD CONSTRAINT "schools_domain_fkey" FOREIGN KEY ("domain") REFERENCES "public"."schools"("domain") ON DELETE no action ON UPDATE cascade;--> statement-breakpoint
CREATE POLICY "Section access by granular role" ON "sections" AS PERMISSIVE FOR SELECT TO "authenticated" USING ((EXISTS ( SELECT 1
   FROM allowed_users au
  WHERE ((au.id = (((( SELECT auth.jwt() AS jwt) -> 'user_metadata'::text) ->> 'allowed_user_id'::text))::integer) AND (((au.role = 'CLASS'::"STUDENT_ACCESS") AND (EXISTS ( SELECT 1
           FROM allowed_user_sections aus
          WHERE ((aus.user_id = au.id) AND (aus.section_id = sections.id))))) OR ((au.role = 'LEVEL'::"STUDENT_ACCESS") AND (EXISTS ( SELECT 1
           FROM allowed_user_sections aus
          WHERE ((aus.user_id = au.id) AND (aus.section_id = sections.id))))) OR ((au.role = 'FULL'::"STUDENT_ACCESS") AND (EXISTS ( SELECT 1
           FROM schools sc
          WHERE ((sc.domain = au.domain) AND (sc.id = sections.school_id))))))))));--> statement-breakpoint
CREATE POLICY "Enable read access for all users" ON "allowed_user_sections" AS PERMISSIVE FOR SELECT TO "authenticated" USING (true);--> statement-breakpoint
CREATE POLICY "Enable read access based on students" ON "attendances" AS PERMISSIVE FOR SELECT TO "authenticated" USING ((EXISTS ( SELECT 1
   FROM students
  WHERE (attendances.student_id = students.id))));--> statement-breakpoint
CREATE POLICY "Enable insert based on students" ON "attendances" AS PERMISSIVE FOR INSERT TO "authenticated";--> statement-breakpoint
CREATE POLICY "Enable read access for its own account" ON "allowed_users" AS PERMISSIVE FOR SELECT TO "authenticated" USING (((((( SELECT auth.jwt() AS jwt) -> 'user_metadata'::text) -> 'allowed_user_id'::text))::integer = id));--> statement-breakpoint
CREATE POLICY "Student access by granular role" ON "students" AS PERMISSIVE FOR SELECT TO "authenticated" USING ((EXISTS ( SELECT 1
   FROM allowed_users au
  WHERE ((au.id = (((( SELECT auth.jwt() AS jwt) -> 'user_metadata'::text) ->> 'allowed_user_id'::text))::integer) AND (((au.role = 'CLASS'::"STUDENT_ACCESS") AND (EXISTS ( SELECT 1
           FROM allowed_user_sections aus
          WHERE ((aus.user_id = au.id) AND (aus.section_id = students.section_id))))) OR ((au.role = 'LEVEL'::"STUDENT_ACCESS") AND (EXISTS ( SELECT 1
           FROM allowed_user_sections aus
          WHERE ((aus.user_id = au.id) AND (aus.section_id = students.section_id))))) OR ((au.role = 'FULL'::"STUDENT_ACCESS") AND (EXISTS ( SELECT 1
           FROM sections s
          WHERE ((s.id = students.section_id) AND (s.school_id IN ( SELECT sc.id
                   FROM schools sc
                  WHERE (sc.domain = au.domain))))))))))));--> statement-breakpoint
CREATE POLICY "School access by domain" ON "schools" AS PERMISSIVE FOR SELECT TO "authenticated" USING ((EXISTS ( SELECT 1
   FROM allowed_users au
  WHERE ((au.id = (((( SELECT auth.jwt() AS jwt) -> 'user_metadata'::text) ->> 'allowed_user_id'::text))::integer) AND (schools.domain = au.domain)))));
*/